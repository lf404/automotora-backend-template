-- =============================================================================
-- Script 01: Creación de la Estructura de Tablas para el Mini-ERP Automotora
-- Versión: 2.0 (Diseñado para SaaS B2B/B2C)
-- Descripción: Script maestro para crear todas las tablas, relaciones, 
--              constraints y triggers para una nueva instancia de cliente.
--              Es re-ejecutable y borra la estructura previa.
-- =============================================================================

-- Sentencia de control para mostrar salida en la consola.
SET SERVEROUTPUT ON;

-- Función para facilitar el borrado de objetos y controlar errores.
CREATE OR REPLACE PROCEDURE drop_object(object_name VARCHAR2, object_type VARCHAR2) IS
BEGIN
 EXECUTE IMMEDIATE 'DROP ' || object_type || ' ' || object_name;
 DBMS_OUTPUT.PUT_LINE(object_type || ' ' || object_name || ' borrado.');
EXCEPTION
 WHEN OTHERS THEN
     -- Si el objeto no existe (ORA-00942 para tablas, ORA-04080 para triggers), lo ignoramos.
     IF SQLCODE IN (-942, -4080) THEN
         DBMS_OUTPUT.PUT_LINE(object_type || ' ' || object_name || ' no existía, ignorado.');
     ELSE
         RAISE;
     END IF;
END;
/

-- Borramos objetos en orden inverso para evitar conflictos de dependencia
BEGIN
 drop_object('TRG_RESERVA_VEHICULO', 'TRIGGER');
 drop_object('PEDIDOS', 'TABLE');
 drop_object('CLIENTES', 'TABLE');
 drop_object('VEHICULOS', 'TABLE');
END;
/

PROMPT Estructura previa limpiada. Creando nuevo esquema ERP...

-- =============================================================================
-- Tabla de Vehículos: Nuestro inventario principal.
-- =============================================================================
CREATE TABLE VEHICULOS (
 ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
 MARCA VARCHAR2(100) NOT NULL,
 MODELO VARCHAR2(100) NOT NULL,
 ANO NUMBER(4) NOT NULL,
 PRECIO_CLP NUMBER(12, 0), -- Precio principal en CLP, sin decimales
 PRECIO_USD NUMBER(10, 2), -- Precio secundario en USD
 FOTO_URL VARCHAR2(1024),
 DESCRIPCION CLOB,
 ESTADO VARCHAR2(20) DEFAULT 'DISPONIBLE' NOT NULL,
 FECHA_CREACION TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
 CONSTRAINT chk_vehiculo_estado CHECK (ESTADO IN ('DISPONIBLE', 'RESERVADO', 'VENDIDO'))
);
PROMPT Tabla VEHICULOS creada.

-- =============================================================================
-- Tabla de Clientes: Soporta tanto B2C como B2B.
-- =============================================================================
CREATE TABLE CLIENTES (
 ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
 NOMBRE VARCHAR2(255) NOT NULL,          -- Nombre de la persona o contacto de la empresa
 EMAIL VARCHAR2(255) UNIQUE NOT NULL,
 PASSWORD_HASH VARCHAR2(255) NOT NULL, -- Siempre hasheado
 TELEFONO VARCHAR2(30),
 TIPO_CLIENTE VARCHAR2(10) DEFAULT 'B2C' NOT NULL,
 RAZON_SOCIAL VARCHAR2(255),          -- Nombre de la empresa (solo para B2B)
 RUT_EMPRESA VARCHAR2(20),            -- RUT o ID Fiscal (solo para B2B)
 FECHA_REGISTRO TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
 CONSTRAINT chk_cliente_tipo CHECK (TIPO_CLIENTE IN ('B2C', 'B2B'))
);
PROMPT Tabla CLIENTES creada.

-- =============================================================================
-- Tabla de Pedidos: El núcleo de las transacciones.
-- =============================================================================
CREATE TABLE PEDIDOS (
 ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
 CLIENTE_ID NUMBER NOT NULL,
 VEHICULO_ID NUMBER NOT NULL,
 MONTO_TRANSACCION NUMBER(14, 2) NOT NULL,
 MONEDA VARCHAR2(5) DEFAULT 'CLP' NOT NULL,
 TIPO_PAGO VARCHAR2(30) NOT NULL,         -- 'PAYPAL', 'TRANSBANK_WEBPAY', 'ORDEN_COMPRA'
 ESTADO_PAGO VARCHAR2(20) DEFAULT 'PENDIENTE' NOT NULL,
 REFERENCIA_PAGO VARCHAR2(255),         -- ID de la transacción externa
 FECHA_PEDIDO TIMESTAMP WITH TIME ZONE DEFAULT SYSTIMESTAMP,
 CONSTRAINT fk_pedidos_cliente FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(ID),
 CONSTRAINT fk_pedidos_vehiculo FOREIGN KEY (VEHICULO_ID) REFERENCES VEHICULOS(ID) ON DELETE SET NULL,
 CONSTRAINT chk_pedido_pago_estado CHECK (ESTADO_PAGO IN ('PENDIENTE', 'PAGADO', 'RECHAZADO', 'ANULADO'))
);
PROMPT Tabla PEDIDOS creada.

-- =============================================================================
-- Lógica de Negocio Automatizada (Triggers e Índices)
-- =============================================================================
CREATE OR REPLACE TRIGGER TRG_RESERVA_VEHICULO
AFTER INSERT ON PEDIDOS
FOR EACH ROW
BEGIN
 -- Cuando se crea CUALQUIER tipo de pedido (siempre nace con pago PENDIENTE)...
 IF :NEW.ESTADO_PAGO = 'PENDIENTE' THEN
     -- ...el vehículo se reserva inmediatamente para sacarlo del stock público.
     UPDATE VEHICULOS
     SET ESTADO = 'RESERVADO'
     WHERE ID = :NEW.VEHICULO_ID;
 END IF;
END;
/
PROMPT Trigger TRG_RESERVA_VEHICULO creado.

CREATE INDEX idx_vehiculos_estado ON VEHICULOS(ESTADO);
PROMPT Índices creados.

-- Guardamos todos los cambios permanentemente
COMMIT;

PROMPT ================================================
PROMPT >> ESQUEMA DEL ERP CREADO EXITOSAMENTE <<
PROMPT ================================================